/*
 * Ergo blockchain explorer
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.ergoplatform.explorer.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Fork info
 */
@Schema(description = "Fork info")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-12-09T08:14:50.203Z[GMT]")
public class ForksInfoForks {
  @SerializedName("length")
  private Integer length = null;

  @SerializedName("branchPointHeight")
  private Integer branchPointHeight = null;

  @SerializedName("orphaned")
  private Boolean orphaned = null;

  @SerializedName("members")
  private List<List<Object>> members = null;

  public ForksInfoForks length(Integer length) {
    this.length = length;
    return this;
  }

   /**
   * Total number of forks
   * @return length
  **/
  @Schema(example = "109", description = "Total number of forks")
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }

  public ForksInfoForks branchPointHeight(Integer branchPointHeight) {
    this.branchPointHeight = branchPointHeight;
    return this;
  }

   /**
   * Height chain forked from
   * @return branchPointHeight
  **/
  @Schema(example = "558", description = "Height chain forked from")
  public Integer getBranchPointHeight() {
    return branchPointHeight;
  }

  public void setBranchPointHeight(Integer branchPointHeight) {
    this.branchPointHeight = branchPointHeight;
  }

  public ForksInfoForks orphaned(Boolean orphaned) {
    this.orphaned = orphaned;
    return this;
  }

   /**
   * True if fork is not linked to main chain, False otherwise
   * @return orphaned
  **/
  @Schema(description = "True if fork is not linked to main chain, False otherwise")
  public Boolean isOrphaned() {
    return orphaned;
  }

  public void setOrphaned(Boolean orphaned) {
    this.orphaned = orphaned;
  }

  public ForksInfoForks members(List<List<Object>> members) {
    this.members = members;
    return this;
  }

  public ForksInfoForks addMembersItem(List<Object> membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

   /**
   * Get members
   * @return members
  **/
  @Schema(description = "")
  public List<List<Object>> getMembers() {
    return members;
  }

  public void setMembers(List<List<Object>> members) {
    this.members = members;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForksInfoForks forksInfoForks = (ForksInfoForks) o;
    return Objects.equals(this.length, forksInfoForks.length) &&
        Objects.equals(this.branchPointHeight, forksInfoForks.branchPointHeight) &&
        Objects.equals(this.orphaned, forksInfoForks.orphaned) &&
        Objects.equals(this.members, forksInfoForks.members);
  }

  @Override
  public int hashCode() {
    return Objects.hash(length, branchPointHeight, orphaned, members);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForksInfoForks {\n");
    
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    branchPointHeight: ").append(toIndentedString(branchPointHeight)).append("\n");
    sb.append("    orphaned: ").append(toIndentedString(orphaned)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
