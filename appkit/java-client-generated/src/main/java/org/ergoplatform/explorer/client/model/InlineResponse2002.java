/*
 * Ergo blockchain explorer
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.ergoplatform.explorer.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.ergoplatform.explorer.client.model.SearchBlock;
/**
 * InlineResponse2002
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-12-09T08:14:50.203Z[GMT]")
public class InlineResponse2002 {
  @SerializedName("blocks")
  private List<SearchBlock> blocks = new ArrayList<>();

  @SerializedName("transactions")
  private List<String> transactions = new ArrayList<>();

  @SerializedName("adresses")
  private List<String> adresses = null;

  public InlineResponse2002 blocks(List<SearchBlock> blocks) {
    this.blocks = blocks;
    return this;
  }

  public InlineResponse2002 addBlocksItem(SearchBlock blocksItem) {
    this.blocks.add(blocksItem);
    return this;
  }

   /**
   * Get blocks
   * @return blocks
  **/
  @Schema(required = true, description = "")
  public List<SearchBlock> getBlocks() {
    return blocks;
  }

  public void setBlocks(List<SearchBlock> blocks) {
    this.blocks = blocks;
  }

  public InlineResponse2002 transactions(List<String> transactions) {
    this.transactions = transactions;
    return this;
  }

  public InlineResponse2002 addTransactionsItem(String transactionsItem) {
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @Schema(required = true, description = "")
  public List<String> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<String> transactions) {
    this.transactions = transactions;
  }

  public InlineResponse2002 adresses(List<String> adresses) {
    this.adresses = adresses;
    return this;
  }

  public InlineResponse2002 addAdressesItem(String adressesItem) {
    if (this.adresses == null) {
      this.adresses = new ArrayList<>();
    }
    this.adresses.add(adressesItem);
    return this;
  }

   /**
   * Get adresses
   * @return adresses
  **/
  @Schema(description = "")
  public List<String> getAdresses() {
    return adresses;
  }

  public void setAdresses(List<String> adresses) {
    this.adresses = adresses;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2002 inlineResponse2002 = (InlineResponse2002) o;
    return Objects.equals(this.blocks, inlineResponse2002.blocks) &&
        Objects.equals(this.transactions, inlineResponse2002.transactions) &&
        Objects.equals(this.adresses, inlineResponse2002.adresses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blocks, transactions, adresses);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2002 {\n");
    
    sb.append("    blocks: ").append(toIndentedString(blocks)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    adresses: ").append(toIndentedString(adresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
