/*
 * Ergo blockchain explorer
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.ergoplatform.explorer.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.ergoplatform.explorer.client.model.Asset;
/**
 * FullAddressTransactions
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-12-09T08:14:50.203Z[GMT]")
public class FullAddressTransactions {
  @SerializedName("confirmed")
  private Integer confirmed = null;

  @SerializedName("totalReceived")
  private Integer totalReceived = null;

  @SerializedName("confirmedBalance")
  private Integer confirmedBalance = null;

  @SerializedName("totalBalance")
  private Integer totalBalance = null;

  @SerializedName("confirmedTokensBalance")
  private List<Asset> confirmedTokensBalance = null;

  @SerializedName("totalTokensBalance")
  private List<Asset> totalTokensBalance = null;

  public FullAddressTransactions confirmed(Integer confirmed) {
    this.confirmed = confirmed;
    return this;
  }

   /**
   * Total number of confirmed transactions
   * @return confirmed
  **/
  @Schema(example = "2341", required = true, description = "Total number of confirmed transactions")
  public Integer getConfirmed() {
    return confirmed;
  }

  public void setConfirmed(Integer confirmed) {
    this.confirmed = confirmed;
  }

  public FullAddressTransactions totalReceived(Integer totalReceived) {
    this.totalReceived = totalReceived;
    return this;
  }

   /**
   * Total recieved coins
   * @return totalReceived
  **/
  @Schema(example = "10455323", description = "Total recieved coins")
  public Integer getTotalReceived() {
    return totalReceived;
  }

  public void setTotalReceived(Integer totalReceived) {
    this.totalReceived = totalReceived;
  }

  public FullAddressTransactions confirmedBalance(Integer confirmedBalance) {
    this.confirmedBalance = confirmedBalance;
    return this;
  }

   /**
   * Confirmed balance
   * @return confirmedBalance
  **/
  @Schema(example = "1123", description = "Confirmed balance")
  public Integer getConfirmedBalance() {
    return confirmedBalance;
  }

  public void setConfirmedBalance(Integer confirmedBalance) {
    this.confirmedBalance = confirmedBalance;
  }

  public FullAddressTransactions totalBalance(Integer totalBalance) {
    this.totalBalance = totalBalance;
    return this;
  }

   /**
   * Total balance including off-chain transactions
   * @return totalBalance
  **/
  @Schema(example = "1123", description = "Total balance including off-chain transactions")
  public Integer getTotalBalance() {
    return totalBalance;
  }

  public void setTotalBalance(Integer totalBalance) {
    this.totalBalance = totalBalance;
  }

  public FullAddressTransactions confirmedTokensBalance(List<Asset> confirmedTokensBalance) {
    this.confirmedTokensBalance = confirmedTokensBalance;
    return this;
  }

  public FullAddressTransactions addConfirmedTokensBalanceItem(Asset confirmedTokensBalanceItem) {
    if (this.confirmedTokensBalance == null) {
      this.confirmedTokensBalance = new ArrayList<>();
    }
    this.confirmedTokensBalance.add(confirmedTokensBalanceItem);
    return this;
  }

   /**
   * Confirmed tokens balance
   * @return confirmedTokensBalance
  **/
  @Schema(description = "Confirmed tokens balance")
  public List<Asset> getConfirmedTokensBalance() {
    return confirmedTokensBalance;
  }

  public void setConfirmedTokensBalance(List<Asset> confirmedTokensBalance) {
    this.confirmedTokensBalance = confirmedTokensBalance;
  }

  public FullAddressTransactions totalTokensBalance(List<Asset> totalTokensBalance) {
    this.totalTokensBalance = totalTokensBalance;
    return this;
  }

  public FullAddressTransactions addTotalTokensBalanceItem(Asset totalTokensBalanceItem) {
    if (this.totalTokensBalance == null) {
      this.totalTokensBalance = new ArrayList<>();
    }
    this.totalTokensBalance.add(totalTokensBalanceItem);
    return this;
  }

   /**
   * Total tokens balance including off-chain transactions
   * @return totalTokensBalance
  **/
  @Schema(description = "Total tokens balance including off-chain transactions")
  public List<Asset> getTotalTokensBalance() {
    return totalTokensBalance;
  }

  public void setTotalTokensBalance(List<Asset> totalTokensBalance) {
    this.totalTokensBalance = totalTokensBalance;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FullAddressTransactions fullAddressTransactions = (FullAddressTransactions) o;
    return Objects.equals(this.confirmed, fullAddressTransactions.confirmed) &&
        Objects.equals(this.totalReceived, fullAddressTransactions.totalReceived) &&
        Objects.equals(this.confirmedBalance, fullAddressTransactions.confirmedBalance) &&
        Objects.equals(this.totalBalance, fullAddressTransactions.totalBalance) &&
        Objects.equals(this.confirmedTokensBalance, fullAddressTransactions.confirmedTokensBalance) &&
        Objects.equals(this.totalTokensBalance, fullAddressTransactions.totalTokensBalance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmed, totalReceived, confirmedBalance, totalBalance, confirmedTokensBalance, totalTokensBalance);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FullAddressTransactions {\n");
    
    sb.append("    confirmed: ").append(toIndentedString(confirmed)).append("\n");
    sb.append("    totalReceived: ").append(toIndentedString(totalReceived)).append("\n");
    sb.append("    confirmedBalance: ").append(toIndentedString(confirmedBalance)).append("\n");
    sb.append("    totalBalance: ").append(toIndentedString(totalBalance)).append("\n");
    sb.append("    confirmedTokensBalance: ").append(toIndentedString(confirmedTokensBalance)).append("\n");
    sb.append("    totalTokensBalance: ").append(toIndentedString(totalTokensBalance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
