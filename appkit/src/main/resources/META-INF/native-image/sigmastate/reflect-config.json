[
  {
    "name":"scala.Some",
    "allPublicConstructors":true
  },
  {
    "name":"scala.collection.immutable.$colon$colon",
    "allPublicConstructors":true
  },
  {
    "name":"scala.collection.immutable.Vector",
    "methods":[{"name":"iterator","parameterTypes":[] }]
  },
  {
    "name":"scala.collection.immutable.VectorIterator",
    "methods":[
      {"name":"hasNext","parameterTypes":[] },
      {"name":"next","parameterTypes":[] }
    ]
  },
  {
    "name":"scala.reflect.NameTransformer",
    "methods":[{"name":"decode","parameterTypes":["java.lang.String"] }]
  },
  {
    "name":"scala.util.Failure",
    "allPublicFields":true,
    "allPublicMethods":true
  },
  {
    "name":"scala.util.Success",
    "allPublicFields":true,
    "allPublicMethods":true
  },
  {
    "name":"scalan.TypeDescs$FuncElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"scalan.TypeDescs$PairElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"scalan.primitives.Thunks$ThunkElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"sigmastate.AND",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.ArithOp",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.AtLeast",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.BinAnd",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.BinOr",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.BoolToSigmaProp",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.ByteArrayToBigInt",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.CAndUncheckedNode",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.CAndUnproven",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.COrUncheckedNode",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.COrUnproven",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.CThresholdUncheckedNode",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.CThresholdUnproven",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.CalcBlake2b256",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.CreateProveDHTuple",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.Downcast",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.EQ",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.Exponentiate",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.GE",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.GT",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.If",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.LE",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.LT",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.LogicalNot",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.MultiplyGroup",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.NEQ",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.Negation",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.OR",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.SCollectionType",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.SOption",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.STuple",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.SigmaAnd",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.SigmaOr",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.SubstConstants",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.Upcast",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.Values$BlockValue",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.Values$ConcreteCollection",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.Values$FuncValue",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.Values$Tuple",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.Values$ValDef",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.eval.CostingRules$AvlTreeCoster",
    "methods":[
      {"name":"contains","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"digest","parameterTypes":[] },
      {"name":"enabledOperations","parameterTypes":[] },
      {"name":"get","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"getMany","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"insert","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"isInsertAllowed","parameterTypes":[] },
      {"name":"isRemoveAllowed","parameterTypes":[] },
      {"name":"isUpdateAllowed","parameterTypes":[] },
      {"name":"keyLength","parameterTypes":[] },
      {"name":"remove","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"update","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"updateDigest","parameterTypes":["scalan.Base$Ref"] },
      {"name":"updateOperations","parameterTypes":["scalan.Base$Ref"] },
      {"name":"valueLengthOpt","parameterTypes":[] }
    ]
  },
  {
    "name":"sigmastate.eval.CostingRules$BoxCoster",
    "methods":[
      {"name":"creationInfo","parameterTypes":[] },
      {"name":"getReg","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"tokens","parameterTypes":[] }
    ]
  },
  {
    "name":"sigmastate.eval.CostingRules$CollCoster",
    "methods":[
      {"name":"filter","parameterTypes":["scalan.Base$Ref"] },
      {"name":"flatMap","parameterTypes":["scalan.Base$Ref"] },
      {"name":"indexOf","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"indices","parameterTypes":[] },
      {"name":"map","parameterTypes":["scalan.Base$Ref"] },
      {"name":"patch","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"updateMany","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"updated","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"zip","parameterTypes":["scalan.Base$Ref"] }
    ]
  },
  {
    "name":"sigmastate.eval.CostingRules$ContextCoster",
    "methods":[
      {"name":"HEIGHT","parameterTypes":[] },
      {"name":"INPUTS","parameterTypes":[] },
      {"name":"LastBlockUtxoRootHash","parameterTypes":[] },
      {"name":"OUTPUTS","parameterTypes":[] },
      {"name":"SELF","parameterTypes":[] },
      {"name":"dataInputs","parameterTypes":[] },
      {"name":"headers","parameterTypes":[] },
      {"name":"minerPubKey","parameterTypes":[] },
      {"name":"preHeader","parameterTypes":[] },
      {"name":"selfBoxIndex","parameterTypes":[] }
    ]
  },
  {
    "name":"sigmastate.eval.CostingRules$GroupElementCoster",
    "methods":[
      {"name":"getEncoded","parameterTypes":[] },
      {"name":"negate","parameterTypes":[] }
    ]
  },
  {
    "name":"sigmastate.eval.CostingRules$HeaderCoster",
    "methods":[
      {"name":"ADProofsRoot","parameterTypes":[] },
      {"name":"extensionRoot","parameterTypes":[] },
      {"name":"height","parameterTypes":[] },
      {"name":"id","parameterTypes":[] },
      {"name":"minerPk","parameterTypes":[] },
      {"name":"nBits","parameterTypes":[] },
      {"name":"parentId","parameterTypes":[] },
      {"name":"powDistance","parameterTypes":[] },
      {"name":"powNonce","parameterTypes":[] },
      {"name":"powOnetimePk","parameterTypes":[] },
      {"name":"stateRoot","parameterTypes":[] },
      {"name":"timestamp","parameterTypes":[] },
      {"name":"transactionsRoot","parameterTypes":[] },
      {"name":"version","parameterTypes":[] },
      {"name":"votes","parameterTypes":[] }
    ]
  },
  {
    "name":"sigmastate.eval.CostingRules$OptionCoster",
    "methods":[
      {"name":"filter","parameterTypes":["scalan.Base$Ref"] },
      {"name":"get","parameterTypes":[] },
      {"name":"getOrElse","parameterTypes":["scalan.Base$Ref"] },
      {"name":"isDefined","parameterTypes":[] },
      {"name":"map","parameterTypes":["scalan.Base$Ref"] }
    ]
  },
  {
    "name":"sigmastate.eval.CostingRules$PreHeaderCoster",
    "methods":[
      {"name":"height","parameterTypes":[] },
      {"name":"minerPk","parameterTypes":[] },
      {"name":"nBits","parameterTypes":[] },
      {"name":"parentId","parameterTypes":[] },
      {"name":"timestamp","parameterTypes":[] },
      {"name":"version","parameterTypes":[] },
      {"name":"votes","parameterTypes":[] }
    ]
  },
  {
    "name":"sigmastate.eval.CostingRules$SigmaDslBuilderCoster",
    "methods":[{"name":"groupGenerator","parameterTypes":[] }]
  },
  {
    "name":"sigmastate.lang.Terms$Apply",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.lang.Terms$ApplyTypes",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.lang.Terms$Block",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.lang.Terms$Lambda",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.lang.Terms$MethodCall",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.lang.Terms$MethodCallLike",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.lang.Terms$Select",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.lang.Terms$ValNode",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.Append",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.ByIndex",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.Exists",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.ExtractAmount",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.ExtractBytesWithNoRef",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.ExtractCreationInfo",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.ExtractId",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.ExtractRegisterAs",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.ExtractScriptBytes",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.Filter",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.Fold",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.ForAll",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.MapCollection",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.OptionGet",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.OptionGetOrElse",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.OptionIsDefined",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.SelectField",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.SigmaPropBytes",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.SigmaPropIsProven",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.SizeOf",
    "allPublicConstructors":true
  },
  {
    "name":"sigmastate.utxo.Slice",
    "allPublicConstructors":true
  },
  {
    "name":"special.collection.Coll",
    "allPublicMethods":true
  },
  {
    "name":"special.collection.CollBuilder",
    "allDeclaredMethods":true
  },
  {
    "name":"special.collection.Colls$Coll",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"append","parameterTypes":["scalan.Base$Ref"] },
      {"name":"apply","parameterTypes":["scalan.Base$Ref"] },
      {"name":"exists","parameterTypes":["scalan.Base$Ref"] },
      {"name":"filter","parameterTypes":["scalan.Base$Ref"] },
      {"name":"flatMap","parameterTypes":["scalan.Base$Ref"] },
      {"name":"foldLeft","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"forall","parameterTypes":["scalan.Base$Ref"] },
      {"name":"getOrElse","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"indexOf","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"indices","parameterTypes":[] },
      {"name":"length","parameterTypes":[] },
      {"name":"map","parameterTypes":["scalan.Base$Ref"] },
      {"name":"patch","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"slice","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"sum","parameterTypes":["scalan.Base$Ref"] },
      {"name":"updateMany","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"updated","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"zip","parameterTypes":["scalan.Base$Ref"] }
    ]
  },
  {
    "name":"special.collection.Colls$CollBuilder",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"fromItems","parameterTypes":["scala.collection.Seq","scalan.TypeDescs$Elem"] },
      {"name":"replicate","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"xor","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] }
    ]
  },
  {
    "name":"special.collection.Costs$Costed",
    "methods":[
      {"name":"cost","parameterTypes":[] },
      {"name":"size","parameterTypes":[] },
      {"name":"value","parameterTypes":[] }
    ]
  },
  {
    "name":"special.collection.Costs$CostedColl",
    "methods":[
      {"name":"costs","parameterTypes":[] },
      {"name":"foldCosted","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"sizes","parameterTypes":[] },
      {"name":"values","parameterTypes":[] }
    ]
  },
  {
    "name":"special.collection.Costs$CostedPair",
    "methods":[
      {"name":"accCost","parameterTypes":[] },
      {"name":"l","parameterTypes":[] },
      {"name":"r","parameterTypes":[] }
    ]
  },
  {
    "name":"special.collection.Size",
    "allDeclaredMethods":true
  },
  {
    "name":"special.collection.SizeColl",
    "allDeclaredMethods":true
  },
  {
    "name":"special.collection.SizeOption",
    "allDeclaredMethods":true
  },
  {
    "name":"special.collection.SizePair",
    "allDeclaredMethods":true
  },
  {
    "name":"special.collection.SizePrim",
    "allDeclaredMethods":true
  },
  {
    "name":"special.collection.Sizes$Size",
    "allDeclaredMethods":true,
    "methods":[{"name":"dataSize","parameterTypes":[] }]
  },
  {
    "name":"special.collection.Sizes$SizeColl",
    "allDeclaredMethods":true,
    "methods":[{"name":"sizes","parameterTypes":[] }]
  },
  {
    "name":"special.collection.Sizes$SizeOption",
    "allDeclaredMethods":true,
    "methods":[{"name":"sizeOpt","parameterTypes":[] }]
  },
  {
    "name":"special.collection.Sizes$SizePair",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"l","parameterTypes":[] },
      {"name":"r","parameterTypes":[] }
    ]
  },
  {
    "name":"special.collection.Sizes$SizePrim",
    "allDeclaredMethods":true
  },
  {
    "name":"special.collection.impl.CollsDefs$Coll$CollElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.ConcreteCostsDefs$CCostedColl$CCostedCollElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.ConcreteCostsDefs$CCostedFunc$CCostedFuncElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.ConcreteCostsDefs$CCostedPair$CCostedPairElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.ConcreteCostsDefs$CCostedPrim$CCostedPrimElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.ConcreteSizesDefs$CSizeColl$CSizeCollElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.ConcreteSizesDefs$CSizeFunc$CSizeFuncElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.ConcreteSizesDefs$CSizeOption$CSizeOptionElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.ConcreteSizesDefs$CSizePair$CSizePairElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.ConcreteSizesDefs$CSizePrim$CSizePrimElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.CostedOptionsDefs$CCostedOption$CCostedOptionElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.CostsDefs$Costed$CostedElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.CostsDefs$CostedColl$CostedCollElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.CostsDefs$CostedFunc$CostedFuncElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.CostsDefs$CostedOption$CostedOptionElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.CostsDefs$CostedPair$CostedPairElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.SizesDefs$Size$SizeElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.SizesDefs$SizeColl$SizeCollElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.SizesDefs$SizeOption$SizeOptionElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.collection.impl.SizesDefs$SizePair$SizePairElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"special.sigma.AvlTree",
    "allDeclaredMethods":true
  },
  {
    "name":"special.sigma.BigInt",
    "allDeclaredMethods":true
  },
  {
    "name":"special.sigma.Box",
    "allDeclaredMethods":true
  },
  {
    "name":"special.sigma.Context",
    "allDeclaredMethods":true
  },
  {
    "name":"special.sigma.CostModel",
    "allDeclaredMethods":true
  },
  {
    "name":"special.sigma.CostedObjects$SizeBox",
    "allDeclaredMethods":true,
    "methods":[{"name":"getReg","parameterTypes":["scalan.Base$Ref","scalan.TypeDescs$Elem"] }]
  },
  {
    "name":"special.sigma.CostedObjects$SizeContext",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"dataInputs","parameterTypes":[] },
      {"name":"getVar","parameterTypes":["scalan.Base$Ref","scalan.TypeDescs$Elem"] },
      {"name":"inputs","parameterTypes":[] },
      {"name":"outputs","parameterTypes":[] },
      {"name":"selfBox","parameterTypes":[] }
    ]
  },
  {
    "name":"special.sigma.GroupElement",
    "allDeclaredMethods":true
  },
  {
    "name":"special.sigma.Header",
    "allDeclaredMethods":true
  },
  {
    "name":"special.sigma.PreHeader",
    "allDeclaredMethods":true
  },
  {
    "name":"special.sigma.SigmaDsl$AvlTree",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"contains","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"digest","parameterTypes":[] },
      {"name":"enabledOperations","parameterTypes":[] },
      {"name":"get","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"getMany","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"insert","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"isInsertAllowed","parameterTypes":[] },
      {"name":"isRemoveAllowed","parameterTypes":[] },
      {"name":"isUpdateAllowed","parameterTypes":[] },
      {"name":"keyLength","parameterTypes":[] },
      {"name":"remove","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"update","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"updateDigest","parameterTypes":["scalan.Base$Ref"] },
      {"name":"updateOperations","parameterTypes":["scalan.Base$Ref"] },
      {"name":"valueLengthOpt","parameterTypes":[] }
    ]
  },
  {
    "name":"special.sigma.SigmaDsl$BigInt",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"add","parameterTypes":["scalan.Base$Ref"] },
      {"name":"divide","parameterTypes":["scalan.Base$Ref"] },
      {"name":"max","parameterTypes":["scalan.Base$Ref"] },
      {"name":"min","parameterTypes":["scalan.Base$Ref"] },
      {"name":"mod","parameterTypes":["scalan.Base$Ref"] },
      {"name":"multiply","parameterTypes":["scalan.Base$Ref"] },
      {"name":"subtract","parameterTypes":["scalan.Base$Ref"] }
    ]
  },
  {
    "name":"special.sigma.SigmaDsl$Box",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"bytes","parameterTypes":[] },
      {"name":"bytesWithoutRef","parameterTypes":[] },
      {"name":"creationInfo","parameterTypes":[] },
      {"name":"getReg","parameterTypes":["scalan.Base$Ref","scalan.TypeDescs$Elem"] },
      {"name":"id","parameterTypes":[] },
      {"name":"propositionBytes","parameterTypes":[] },
      {"name":"registers","parameterTypes":[] },
      {"name":"tokens","parameterTypes":[] },
      {"name":"value","parameterTypes":[] }
    ]
  },
  {
    "name":"special.sigma.SigmaDsl$Context",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"HEIGHT","parameterTypes":[] },
      {"name":"INPUTS","parameterTypes":[] },
      {"name":"LastBlockUtxoRootHash","parameterTypes":[] },
      {"name":"OUTPUTS","parameterTypes":[] },
      {"name":"SELF","parameterTypes":[] },
      {"name":"dataInputs","parameterTypes":[] },
      {"name":"getVar","parameterTypes":["scalan.Base$Ref","scalan.TypeDescs$Elem"] },
      {"name":"headers","parameterTypes":[] },
      {"name":"minerPubKey","parameterTypes":[] },
      {"name":"preHeader","parameterTypes":[] },
      {"name":"selfBoxIndex","parameterTypes":[] }
    ]
  },
  {
    "name":"special.sigma.SigmaDsl$CostModel",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"AccessBox","parameterTypes":[] },
      {"name":"GetRegister","parameterTypes":[] },
      {"name":"GetVar","parameterTypes":[] },
      {"name":"SelectField","parameterTypes":[] }
    ]
  },
  {
    "name":"special.sigma.SigmaDsl$GroupElement",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"exp","parameterTypes":["scalan.Base$Ref"] },
      {"name":"getEncoded","parameterTypes":[] },
      {"name":"multiply","parameterTypes":["scalan.Base$Ref"] },
      {"name":"negate","parameterTypes":[] }
    ]
  },
  {
    "name":"special.sigma.SigmaDsl$Header",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"ADProofsRoot","parameterTypes":[] },
      {"name":"extensionRoot","parameterTypes":[] },
      {"name":"height","parameterTypes":[] },
      {"name":"id","parameterTypes":[] },
      {"name":"minerPk","parameterTypes":[] },
      {"name":"nBits","parameterTypes":[] },
      {"name":"parentId","parameterTypes":[] },
      {"name":"powDistance","parameterTypes":[] },
      {"name":"powNonce","parameterTypes":[] },
      {"name":"powOnetimePk","parameterTypes":[] },
      {"name":"stateRoot","parameterTypes":[] },
      {"name":"timestamp","parameterTypes":[] },
      {"name":"transactionsRoot","parameterTypes":[] },
      {"name":"version","parameterTypes":[] },
      {"name":"votes","parameterTypes":[] }
    ]
  },
  {
    "name":"special.sigma.SigmaDsl$PreHeader",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"height","parameterTypes":[] },
      {"name":"minerPk","parameterTypes":[] },
      {"name":"nBits","parameterTypes":[] },
      {"name":"parentId","parameterTypes":[] },
      {"name":"timestamp","parameterTypes":[] },
      {"name":"version","parameterTypes":[] },
      {"name":"votes","parameterTypes":[] }
    ]
  },
  {
    "name":"special.sigma.SigmaDsl$SigmaDslBuilder",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"CostModel","parameterTypes":[] },
      {"name":"allOf","parameterTypes":["scalan.Base$Ref"] },
      {"name":"allZK","parameterTypes":["scalan.Base$Ref"] },
      {"name":"anyOf","parameterTypes":["scalan.Base$Ref"] },
      {"name":"anyZK","parameterTypes":["scalan.Base$Ref"] },
      {"name":"atLeast","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"blake2b256","parameterTypes":["scalan.Base$Ref"] },
      {"name":"byteArrayToBigInt","parameterTypes":["scalan.Base$Ref"] },
      {"name":"byteArrayToLong","parameterTypes":["scalan.Base$Ref"] },
      {"name":"decodePoint","parameterTypes":["scalan.Base$Ref"] },
      {"name":"groupGenerator","parameterTypes":[] },
      {"name":"longToByteArray","parameterTypes":["scalan.Base$Ref"] },
      {"name":"proveDHTuple","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref","scalan.Base$Ref","scalan.Base$Ref"] },
      {"name":"proveDlog","parameterTypes":["scalan.Base$Ref"] },
      {"name":"sha256","parameterTypes":["scalan.Base$Ref"] },
      {"name":"sigmaProp","parameterTypes":["scalan.Base$Ref"] },
      {"name":"substConstants","parameterTypes":["scalan.Base$Ref","scalan.Base$Ref","scalan.Base$Ref","scalan.TypeDescs$Elem"] },
      {"name":"xorOf","parameterTypes":["scalan.Base$Ref"] }
    ]
  },
  {
    "name":"special.sigma.SigmaDsl$SigmaProp",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"$amp$amp","parameterTypes":["scalan.Base$Ref"] },
      {"name":"$amp$amp","parameterTypes":["scalan.Base$Ref","scalan.OverloadHack$Overloaded1"] },
      {"name":"$bar$bar","parameterTypes":["scalan.Base$Ref"] },
      {"name":"isValid","parameterTypes":[] },
      {"name":"propBytes","parameterTypes":[] }
    ]
  },
  {
    "name":"special.sigma.SigmaDslBuilder",
    "allDeclaredMethods":true
  },
  {
    "name":"special.sigma.SigmaProp",
    "allDeclaredMethods":true
  },
  {
    "name":"special.sigma.SizeBox",
    "allDeclaredMethods":true
  },
  {
    "name":"special.sigma.SizeContext",
    "allDeclaredMethods":true
  },
  {
    "name":"sun.misc.Unsafe",
    "allDeclaredFields":true
  },
  {
    "name":"wrappers.scala.WOptions$WOption",
    "allDeclaredMethods":true,
    "methods":[
      {"name":"filter","parameterTypes":["scalan.Base$Ref"] },
      {"name":"get","parameterTypes":[] },
      {"name":"getOrElse","parameterTypes":["scalan.Base$Ref"] },
      {"name":"isDefined","parameterTypes":[] },
      {"name":"map","parameterTypes":["scalan.Base$Ref"] }
    ]
  },
  {
    "name":"wrappers.scala.impl.WOptionsDefs$WOption$$anon$1",
    "allDeclaredMethods":true
  },
  {
    "name":"wrappers.scala.impl.WOptionsDefs$WOption$WOptionElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"wrappers.scalan.impl.WRTypesDefs$WRType$WRTypeElem",
    "allDeclaredConstructors":true
  },
  {
    "name":"wrappers.special.WSpecialPredefs$WSpecialPredefCompanion",
    "methods":[{"name":"some","parameterTypes":["scalan.Base$Ref"] }]
  }
]
